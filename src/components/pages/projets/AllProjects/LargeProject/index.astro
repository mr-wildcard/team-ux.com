---
import CallToAction from "../../../../../components/@common/CallToAction.astro";
import Testimonial, {
  type Testimonial,
} from "../../../../../components/Testimonial.astro";
import Icon from "../../../../../components/@common/Icon.astro";
import Tag from "../../../../@common/Tag.astro";
import Image from "../../../../@common/Image.astro";

interface Props {
  project: {
    title: string;
    logo: string;
    activity: string;
    skills: string[];
    images?: string[];
    imagesLegends?: string[];
    imagesAlts?: string[];
    description: {
      title: string;
      content: string;
    };
    testimonial?: Testimonial | Array<Testimonial>;
  };
}

const { project } = Astro.props;

const hasManyTestimonials = Array.isArray(project.testimonial);
---

<div
  class="project flex flex-col max-lg:space-y-8 px-5 py-6 lg:p-10 bg-neutral4 rounded-[26px]"
>
  <div class="flex flex-col max-lg:space-y-8 lg:flex-row lg:space-x-8">
    <div class="flex flex-col space-y-8 lg:flex-[0_0_40%]">
      <Image
        class="rounded-[12px] border border-neutral3"
        srcSet={[
          `/images/projets/logo-${project.logo}.png`,
          `/images/projets/logo-${project.logo}.avif`,
          `/images/projets/logo-${project.logo}.webp`
        ]}
        width={200}
        height={80}
        alt=""
      />


      <div>
        <p class="mb-3 lg:mb-2.5 text-headline-medium-bold">
          {project.title}
        </p>
        <p class="text-body-large text-neutral1">
          {project.activity}
        </p>
      </div>
      <ul class="flex flex-wrap -mx-[5px]">
        {
          project.skills.map((skill) => {
            return (
              <li class="m-[5px]">
                <Tag name={skill} />
              </li>
            );
          })
        }
      </ul>
    </div>
    <div
      class="flex flex-col space-y-5 px-5 py-6 lg:p-10 bg-surface5 rounded-[20px]"
    >
      <h3 class="text-headline-medium-bold lg:text-headline-large">
        {project.description.title}
      </h3>
      <p class="text-body-medium">
        {project.description.content}
      </p>

      {
        project.testimonial && (
          <details class="testimonials">
            <summary>
              <CallToAction
                type="secondary"
                as="div"
                rightIcon="expand_more"
                class="cursor-pointer"
              >
                Déplier
                {hasManyTestimonials ? "les témoignages" : "le témoignage"}
              </CallToAction>
            </summary>

            <div class="mt-5">
              {!hasManyTestimonials && (
                <Testimonial
                  viewMode="inline"
                  testimonial={project.testimonial}
                />
              )}

              {hasManyTestimonials && (
                <ul class="flex flex-col space-y-2.5">
                  {project.testimonial.map((testimonial) => {
                    return (
                      <li>
                        <Testimonial
                          viewMode="inline"
                          testimonial={testimonial}
                        />
                      </li>
                    );
                  })}
                </ul>
              )}
            </div>
          </details>
        )
      }
    </div>
  </div>

  {
    project.images && (
      <!-- 22px: height of the title "open gallery" -->
      <details class="gallery lg:-translate-y-[22px] lg:-mb-[22px]">
        <CallToAction
          as="summary"
          type="primary"
          variant="transparent"
          class="underline w-full cursor-pointer"
        >
          <span class="closed flex items-center space-x-1.5 ">
            <span>Afficher la galerie de ce projet</span>
            <Icon name="visibility" width={22} height={22} />
          </span>

          <span class="opened flex items-center space-x-1.5">
            <span>Fermer la galerie</span>
            <Icon name="cross" width={18} height={18} />
          </span>
        </CallToAction>

        <div class="gallery flex flex-col space-y-14 mt-8">
          <ul class="flex flex-col max-lg:space-y-12 lg:flex-row lg:space-x-4">
            {new Array(3).fill(0).map((_, index, array) => {
              const imageIndex = index + 1;

              return (
                <li class="flex-1">
                  <a
                    href={`/images/projets/${project.images}-${imageIndex}.png`}
                    target="_blank"
                    class="project-image-link lg:aspect-[431/361] relative flex overflow-hidden rounded-md lg:rounded-lg"
                  >
                    <CallToAction tabindex="-1" class="opacity-0 absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2" type="secondary" rightIcon="open_in_new">
                      Ouvrir l'image
                    </CallToAction>

                    <Image
                      srcSet={[
                        `/images/projets/${project.images}-${imageIndex}.png`,
                        `/images/projets/${project.images}-${imageIndex}.avif`,
                        `/images/projets/${project.images}-${imageIndex}.webp`
                      ]}
                      style="opacity: 0"
                      class="opacity-0 transition-opacity"
                      onload="this.style.opacity = '1'"
                      alt={project.imagesAlts[index] ?? ""}
                      longdesc={`#longdesc-${project.images}`}
                    />
                  </a>

                  {project.imagesLegends[index] && (
                    <p id={`longdesc-${project.images}`} class="mt-5 text-body-medium">{project.imagesLegends[index]}</p>
                  )}
                </li>
              );
            })}
          </ul>
          <div class="flex space-x-2.5">
            <span role="presentation">
              <Icon name="photo_prints" width={24} height={24} />
            </span>
            <p class="text-neutral1 text-body-small">
              Dans une <a href="/demarche-eco-conception" class="text-primary underline underline-offset-[4px] hover:text-secondary">démarche d’éco-responsabilité</a>, nous vous proposons de
              n’ouvrir
              <br class="hidden lg:block" />
              que les galeries et visuels dont vous avez besoin.
            </p>
          </div>
        </div>
      </details>
    )
    }
</div>

<style>
    .testimonials[open] {
        :global([astro-icon="expand_more"]) {
            transform: scaleY(-1);
        }
    }

  .gallery {
    .opened {
      display: none;
    }

    &[open] {
      .closed {
        display: none;
      }

      .opened {
        display: flex;
      }
    }
  }

  @screen lg {
    .project-image-link {
      &:before {
        @apply bg-primary;
        position: absolute;
        pointer-events: none;
        opacity: 0;
        content: "";
        inset: 0;
      }

      &:hover {
        button {
          opacity: 1;
        }

        &:before {
          opacity: 80%;
        }
      }
    }
  }
</style>

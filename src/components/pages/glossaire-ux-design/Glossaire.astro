---
import data from "../../../data/glossaire-design-ux/data.yaml";
import Grid from "../../@common/Grid.astro";
import Letter from "./Letter.astro";

const totalDefinitions = data.length;
const allLetters = [
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
];

const groupedDefinitions = new Map();

for (const definition of data) {
  const letter = definition.term
    .at(0)
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "");

  if (!groupedDefinitions.has(letter)) {
    groupedDefinitions.set(letter, new Set());
  }

  const letterGroup = groupedDefinitions.get(letter);

  letterGroup.add({
    term: definition.term,
    alternative: definition.alternative,
    slug: definition.term
      .toLowerCase()
      .trim()
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "")
      .replace(/[^a-z0-9\s-]/g, " ")
      .trim()
      .replace(/[\s-]+/g, "-"),
    content: definition.content,
  });
}
---

<section class="mt-[60px]">
  <div class="sticky-letters hidden sticky top-[83px] bg-surface1">
    <div class="container">
      <Grid>
        <div class="xl:col-span-full py-4 border-b border-neutral2">
          <ul class="flex justify-between">
            {
              allLetters.map((letter) => {
                return (
                  <li class="sticky-letter" data-letter={letter}>
                    <Letter
                      letter={letter}
                      hasDefinitions={groupedDefinitions.has(letter)}
                    />
                  </li>
                );
              })
            }
          </ul>
        </div>
      </Grid>
    </div>
  </div>

  <div class="container">
    <Grid>
      <div class="xl:col-start-2 xl:col-span-10 mb-[140px]">
        <h2 class="mb-5 text-headline-medium text-neutral1">
          {totalDefinitions} définitions de l’UX design
        </h2>
        <ul class="letters flex flex-wrap gap-x-[7px]">
          {
            allLetters.map((letter) => {
              return (
                <li class="pb-[15px]">
                  <Letter
                    letter={letter}
                    hasDefinitions={groupedDefinitions.has(letter)}
                  />
                </li>
              );
            })
          }
        </ul>
      </div>

      <div class="xl:col-start-2 xl:col-span-8">
        <div class="xl:space-y-[100px]">
          {
            Array.from(groupedDefinitions.keys()).map((letter) => {
              return (
                <div data-letter-section={letter} class="letter-section">
                  <p
                    id={`letter-${letter}`}
                    class="mb-6 block text-headline-large uppercase xl:scroll-mt-[190px]"
                  >
                    {letter}
                  </p>
                  <div class="flex flex-col gap-5">
                    {Array.from(groupedDefinitions.get(letter)).map(
                      (definition) => {
                        return (
                          <div class="p-10 bg-neutral4 rounded-[26px]">
                            <h3
                              id={definition.slug}
                              class=" mb-5text-headline-small  scroll-mt-[50vh]"
                            >
                              <span>{definition.term}</span>&nbsp;
                              <a
                                class="text-label-medium text-primary underline text-underline-offset-[4px]"
                                href={`#${definition.slug}`}
                              >
                                #
                              </a>
                              {definition.alternative && (
                                <>
                                  <br />
                                  {definition.alternative}
                                </>
                              )}
                            </h3>
                            <p class="text-body-medium">{definition.content}</p>
                          </div>
                        );
                      },
                    )}
                  </div>
                </div>
              );
            })
          }
        </div>
      </div>

      <div class="xl:col-start-2 xl:col-span-7 xl:mt-40">
        <p class="text-body-medium">
          Nous espérons que ce glossaire vous aide à mieux comprendre ce qui se
          cache derrière le jargon de l’UX design et ses anglicismes. N’hésitez
          pas à nous contacter si vous pensez qu’une définition manque à l’appel
          ou pourrait être améliorée.
        </p>
      </div>
    </Grid>
  </div>
</section>

<style>
  .sticky-letter.active :global(a) {
    @apply text-neutral4 bg-primary underline underline-offset-[4px];
  }
</style>

<script>
  const letters = document.querySelector(".letters");
  const stickyLetters = document.querySelector(".sticky-letters");

  const stickyLettersObserver = new IntersectionObserver(
    ([entry]) => {
      if (
        entry.intersectionRatio === 0 &&
        stickyLetters.classList.contains("hidden")
      ) {
        stickyLetters.classList.remove("hidden");
      } else if (
        entry.intersectionRatio === 1 &&
        !stickyLetters.classList.contains("hidden")
      ) {
        stickyLetters.classList.add("hidden");
      }
    },
    {
      rootMargin: "0px",
      threshold: [0, 1],
    },
  );

  stickyLettersObserver.observe(letters);

  const letterSections = document.querySelectorAll(".letter-section");
  const letterSectionsLetterAnchors = new Map();

  const letterSectionsObserver = new IntersectionObserver(
    (entries) => {
      entries.forEach((entry) => {
        const stickyLetter = letterSectionsLetterAnchors.get(entry.target);

        if (
          entry.intersectionRatio === 0 &&
          stickyLetter.classList.contains("active")
        ) {
          stickyLetter.classList.remove("active");
        } else if (
          entry.intersectionRatio > 0 &&
          !stickyLetter.classList.contains("active")
        ) {
          stickyLetter.classList.add("active");
        }
      });
    },
    {
      threshold: [0, 1],
    },
  );

  letterSections.forEach((section) => {
    const letterAnchor = document.querySelector(
      `.sticky-letters li[data-letter=${section.dataset.letterSection}]`,
    );

    letterSectionsLetterAnchors.set(section, letterAnchor);

    letterSectionsObserver.observe(section);
  });
</script>

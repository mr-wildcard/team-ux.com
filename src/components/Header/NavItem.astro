---
const { pathname } = Astro.url;
const { ariaControlsValue, to, class: cssClasses, isSelected } = Astro.props;

let HTMLTag = "span";
let hrefAttribute = undefined;
let ariaExpandedAttribute = undefined;
let ariaControlsAttribute = undefined;

const hasSubmenu = "submenu" in Astro.slots;

if (hasSubmenu) {
  HTMLTag = "button";
  ariaExpandedAttribute = "false";
  ariaControlsAttribute = ariaControlsValue;
} else if (to !== pathname) {
  HTMLTag = "a";
  hrefAttribute = to ?? undefined;
}

const selected =
  isSelected || pathname.replaceAll("/", "") === to?.replaceAll("/", "");
---

<HTMLTag
  href={hrefAttribute}
  aria-expanded={ariaExpandedAttribute}
  aria-controls={ariaControlsAttribute}
  aria-current={selected ? "page" : undefined}
  class:list={[
    "nav-item",
    "text-headline-large",
    "lg:text-label-medium",
    { selected },
    cssClasses,
  ]}
>
  <span class:list={["title", { "flex items-center space-x-1": hasSubmenu }]}>
    <slot />
  </span>

  <slot name="submenu" />
</HTMLTag>

<style>
  @reference '../../styles/base.css';

  button.nav-item {
    :not(.selected):hover .title {
       {
        color: var(--color-secondary) !important;
      }
    }

    [data-icon="arrow_drop_down"] {
      color: var(--color-primary);
    }
  }

  button.nav-item.opened {
  [data-icon="arrow_drop_down"] {
      transform: rotateZ(180deg);
    }

    .submenu-container {
      display: block;
    }
  }

  .nav-item {
    display: block;

    &.selected {
      text-decoration: underline;
      text-underline-offset: 10px;

      .title {
        color: var(--color-primary);
      }
    }

    &:after {
      content: "";
      position: absolute;
      left: -1px;
      right: -1px;
      bottom: -4px;
      height: 2px;
      border-radius: 2px;
      opacity: 0;
      background-color: var(--color-primary);
    }

    &:focus {
      @apply rounded-[1px] outline outline-offset-[2px] outline-[3px] outline-secondary;
    }

    @variant lg {
      position: relative;
      white-space: nowrap;
      padding: 0;

      &.selected,
      &:hover {
        text-decoration: none;

        &:after {
          opacity: 1;
        }
      }
    }
  }
</style>

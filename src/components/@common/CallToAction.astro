---
import Icon from "./Icon.astro";
import { HTMLAttributes, Polymorphic, HTMLTag } from "astro/types";

type BasicHTMLAttrbutes = HTMLAttributes<"a"> & HTMLAttributes<"button">;

type Props<Tag extends HTMLTag> = BasicHTMLAttrbutes &
  Polymorphic<{
    type?: "primary" | "secondary";
    variant?: "outlined" | "transparent";
    href?: string;
    leftIcon?: string;
    rightIcon?: string;
    as?: Tag;
    class: string;
  }>;

const {
  type = "primary",
  variant,
  href,
  leftIcon,
  rightIcon,
  as,
  class: cssClasses,
  ...props
} = Astro.props;

const HTMLTag = as ? as : href ? "a" : "button";
const htmlAttributes = {
  ...props,
  href: href ?? undefined,
  "class:list": [
    "call-to-action",
    {
      transparent: variant === "transparent",
      outlined: variant === "outlined",
      primary: type === "primary",
      secondary: type === "secondary",
    },
    {
      "text-label-large": variant !== "transparent" && type === "primary",
      "text-label-medium": variant === "transparent" && type === "secondary",
      "text-label-medium lg:text-label-medium-bold":
        (variant !== "transparent" && type === "secondary") ||
        (variant === "transparent" && type === "primary"),
    },
    cssClasses,
  ],
};

const iconSize = variant === "transparent" ? 18 : 24;
---

<HTMLTag {...htmlAttributes}>
  {leftIcon && <Icon name={leftIcon} width={iconSize} height={iconSize} />}
  <span>
    <slot />
  </span>
  {rightIcon && <Icon name={rightIcon} width={iconSize} height={iconSize} />}
</HTMLTag>

<style>
  @reference '../../styles/base.css';

  .call-to-action {
    display: flex;
    align-items: center;
    width: fit-content;

    &:not(.transparent) {
      border-radius: 100px;

      &:focus {
        @apply outline outline-offset-[3px] outline-[3px] outline-secondary;

        box-shadow: 0 0 0 3px white;
      }

      &.primary {
        @apply px-10 py-4 space-x-2.5 text-neutral4 bg-primary hover:bg-secondary;

        &.outlined {
          @apply text-primary bg-neutral4;
        }

        & :global([data-icon]) {
          @apply fill-neutral4;
        }
      }

      &.secondary {
        @apply px-5	py-2.5 space-x-1.5 text-primary bg-neutral4;
      }

      &.primary.outlined,
      &.secondary {
        @apply shadow-primary;

        box-shadow: inset 0 0 0 2px;

        &:hover {
          @apply border-primary hover:text-neutral4 hover:bg-primary hover:shadow-primary;

          box-shadow: none;
        }

        & :global([data-icon]) {
          @apply fill-primary;
        }

        &:hover {
          & :global([data-icon]) {
            @apply fill-neutral4;
          }
        }
      }
    }

    &.transparent {
      @apply space-x-2 underline-offset-[4px] hover:underline;

      &:focus {
        @apply rounded-[1px] outline outline-offset-[2px] outline-[3px] outline-secondary;
      }

      &.primary {
        @apply text-primary;

        &:hover {
          @apply text-secondary;
        }
      }

      &.secondary {
        @apply text-secondary;
      }
    }
  }
</style>

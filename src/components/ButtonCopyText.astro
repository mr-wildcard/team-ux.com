---
import CallToAction from "./@common/CallToAction.astro";

interface Props {
  label: string;
  textToCopy: string;
  toastCopySuccessText: string;
}

const { label, textToCopy, toastCopySuccessText, ...props } = Astro.props;
---

<CallToAction
  {...props}
  class="copy-text"
  leftIcon="content_copy"
  data-text-to-copy={textToCopy}
  data-toast-copy-success-text={toastCopySuccessText}
>
  <slot />
</CallToAction>

<script>
  const buttons = document.querySelectorAll("button.copy-text");
  const toast = document.querySelector("#toast");
  const toastContent = toast.querySelector("span");

  // Hack for Safari not replaying the animation when we click on the button several times.
  // Removing classes after the animation allows the toast to appear again.
  toast.addEventListener("animationend", () => {
    toast.classList.remove("show", "hide");
  });

  function showToast() {
    toast.classList.add("show");
  }

  function hideToast() {
    toast.classList.add("hide");
  }

  buttons.forEach((button) => {
    const { textToCopy, toastCopySuccessText } = button.dataset;

    async function onUserClicksOnCopyButton() {
      button.removeEventListener("click", onUserClicksOnCopyButton);

      toast.classList.remove("show", "hide");
      toastContent.textContent = toastCopySuccessText;

      try {
        await navigator.clipboard.writeText(textToCopy);
        await showToast(toastCopySuccessText);
      } catch (err) {
        console.error("Failed to copy text:", textToCopy, err);
      } finally {
        button.addEventListener("click", onUserClicksOnCopyButton);
      }
    }

    button.addEventListener("click", onUserClicksOnCopyButton);
  });

  toast.addEventListener("click", hideToast);
</script>
